//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleCalculatorApplication.CalculatorService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalculatorService.IMasterService")]
    public interface IMasterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/Add", ReplyAction="http://tempuri.org/IMasterService/AddResponse")]
        double Add(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/Add", ReplyAction="http://tempuri.org/IMasterService/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/Substract", ReplyAction="http://tempuri.org/IMasterService/SubstractResponse")]
        double Substract(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/Substract", ReplyAction="http://tempuri.org/IMasterService/SubstractResponse")]
        System.Threading.Tasks.Task<double> SubstractAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/Multiply", ReplyAction="http://tempuri.org/IMasterService/MultiplyResponse")]
        double Multiply(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/Multiply", ReplyAction="http://tempuri.org/IMasterService/MultiplyResponse")]
        System.Threading.Tasks.Task<double> MultiplyAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/Divide", ReplyAction="http://tempuri.org/IMasterService/DivideResponse")]
        double Divide(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/Divide", ReplyAction="http://tempuri.org/IMasterService/DivideResponse")]
        System.Threading.Tasks.Task<double> DivideAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/Modulo", ReplyAction="http://tempuri.org/IMasterService/ModuloResponse")]
        double Modulo(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/Modulo", ReplyAction="http://tempuri.org/IMasterService/ModuloResponse")]
        System.Threading.Tasks.Task<double> ModuloAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/Pow", ReplyAction="http://tempuri.org/IMasterService/PowResponse")]
        double Pow(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/Pow", ReplyAction="http://tempuri.org/IMasterService/PowResponse")]
        System.Threading.Tasks.Task<double> PowAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/SumOfSquares", ReplyAction="http://tempuri.org/IMasterService/SumOfSquaresResponse")]
        double SumOfSquares(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/SumOfSquares", ReplyAction="http://tempuri.org/IMasterService/SumOfSquaresResponse")]
        System.Threading.Tasks.Task<double> SumOfSquaresAsync(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/MagicOperation", ReplyAction="http://tempuri.org/IMasterService/MagicOperationResponse")]
        double MagicOperation(double x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/MagicOperation", ReplyAction="http://tempuri.org/IMasterService/MagicOperationResponse")]
        System.Threading.Tasks.Task<double> MagicOperationAsync(double x, double y);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMasterServiceChannel : ConsoleCalculatorApplication.CalculatorService.IMasterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MasterServiceClient : System.ServiceModel.ClientBase<ConsoleCalculatorApplication.CalculatorService.IMasterService>, ConsoleCalculatorApplication.CalculatorService.IMasterService {
        
        public MasterServiceClient() {
        }
        
        public MasterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MasterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MasterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MasterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double x, double y) {
            return base.Channel.Add(x, y);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double x, double y) {
            return base.Channel.AddAsync(x, y);
        }
        
        public double Substract(double x, double y) {
            return base.Channel.Substract(x, y);
        }
        
        public System.Threading.Tasks.Task<double> SubstractAsync(double x, double y) {
            return base.Channel.SubstractAsync(x, y);
        }
        
        public double Multiply(double x, double y) {
            return base.Channel.Multiply(x, y);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyAsync(double x, double y) {
            return base.Channel.MultiplyAsync(x, y);
        }
        
        public double Divide(double x, double y) {
            return base.Channel.Divide(x, y);
        }
        
        public System.Threading.Tasks.Task<double> DivideAsync(double x, double y) {
            return base.Channel.DivideAsync(x, y);
        }
        
        public double Modulo(double x, double y) {
            return base.Channel.Modulo(x, y);
        }
        
        public System.Threading.Tasks.Task<double> ModuloAsync(double x, double y) {
            return base.Channel.ModuloAsync(x, y);
        }
        
        public double Pow(double x, double y) {
            return base.Channel.Pow(x, y);
        }
        
        public System.Threading.Tasks.Task<double> PowAsync(double x, double y) {
            return base.Channel.PowAsync(x, y);
        }
        
        public double SumOfSquares(double x, double y) {
            return base.Channel.SumOfSquares(x, y);
        }
        
        public System.Threading.Tasks.Task<double> SumOfSquaresAsync(double x, double y) {
            return base.Channel.SumOfSquaresAsync(x, y);
        }
        
        public double MagicOperation(double x, double y) {
            return base.Channel.MagicOperation(x, y);
        }
        
        public System.Threading.Tasks.Task<double> MagicOperationAsync(double x, double y) {
            return base.Channel.MagicOperationAsync(x, y);
        }
    }
}
