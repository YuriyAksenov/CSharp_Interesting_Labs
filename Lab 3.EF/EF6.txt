1. Придумать пример (модель), в которой таблица многие-ко-многим используется для определения связи:
Музыканты - группы
В каждой музыкальной группе играет несколько музыкантов. При этом каждый музыкант может играть в нескольких 
группах.

В примере должно быть несколько сущностей со связями типа:
1:1 
1:N 
N:N (многие-ко-многим)
Также должна быть таблица с произвольной статистикой Stats, в которой содержатся агрегированные данные.
(!) При изменении каких-либо сущностей эта таблица должна обновляться в той же транзакции.

2. Создать две модели Entity Framework (EF): Code First и Database First для вашего примера.

3. Должны быть реализованы функции CRUD (create, read, update, delete) для каждой сущности (таблицы).
После изменений база должна оставаться целостностной. Также должны быть созданы unit-тесты, демонстрирующие работоспособность модели.

4. Изменить схему базы (можно руками) - добавить несколько новых сущностей, удалить 1-2 старых. Создать одну (две) миграции, определяющих эти изменения, и выложить их в TFS.


Пример "Футбольные сборные"

Пусть есть сущности:
Игрок(PlayerID, FirstName, SecondName, AddressID, TeamID, NumberOfGoals)
Адрес игрока(AddressID, Coutry, City, Street, Building, Appartment)
Футбольная команда(TeamID, TeamName, EstYear)
Стадион(StadiumID, StadiumName)

Тогда 
Игрок - Адрес игрока. Это связь 1:1. Предположим, что все игроки живут по разным адресам.
Футбольная команда - Игрок. Это связь 1:N. В одной команде играет сразу несколько игроков.
Футбольная команда - Стадион. Это связь N:N. На одном стадионе тренируются сразу несколько команд, при этом одна команда может тренироваться на нескольких стадионах

В качестве Stats можно взять статистику футбольной команды. например:
Stats(TeamID, NumberOfPlayers, NumberOfStadiums, AverageGoalsPerPlayer)
NumberOfPlayers - количество игроков в команде
NumberOfStadiums - количество стадионов, на которых тренируется команда
AverageGoalsPerPlayer - среднее количество голов, которое забивает один игрок команды
